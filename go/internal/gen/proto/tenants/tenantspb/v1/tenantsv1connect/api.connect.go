// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: tenants/tenantspb/v1/api.proto

package tenantsv1connect

import (
	v1 "app/internal/gen/proto/tenants/tenantspb/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantsServiceName is the fully-qualified name of the TenantsService service.
	TenantsServiceName = "tenants.tenantspb.v1.TenantsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantsServiceCreateTenantProcedure is the fully-qualified name of the TenantsService's
	// CreateTenant RPC.
	TenantsServiceCreateTenantProcedure = "/tenants.tenantspb.v1.TenantsService/CreateTenant"
	// TenantsServiceGetTenantProcedure is the fully-qualified name of the TenantsService's GetTenant
	// RPC.
	TenantsServiceGetTenantProcedure = "/tenants.tenantspb.v1.TenantsService/GetTenant"
)

// TenantsServiceClient is a client for the tenants.tenantspb.v1.TenantsService service.
type TenantsServiceClient interface {
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error)
	GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error)
}

// NewTenantsServiceClient constructs a client for the tenants.tenantspb.v1.TenantsService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantsServiceMethods := v1.File_tenants_tenantspb_v1_api_proto.Services().ByName("TenantsService").Methods()
	return &tenantsServiceClient{
		createTenant: connect.NewClient[v1.CreateTenantRequest, v1.CreateTenantResponse](
			httpClient,
			baseURL+TenantsServiceCreateTenantProcedure,
			connect.WithSchema(tenantsServiceMethods.ByName("CreateTenant")),
			connect.WithClientOptions(opts...),
		),
		getTenant: connect.NewClient[v1.GetTenantRequest, v1.GetTenantResponse](
			httpClient,
			baseURL+TenantsServiceGetTenantProcedure,
			connect.WithSchema(tenantsServiceMethods.ByName("GetTenant")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantsServiceClient implements TenantsServiceClient.
type tenantsServiceClient struct {
	createTenant *connect.Client[v1.CreateTenantRequest, v1.CreateTenantResponse]
	getTenant    *connect.Client[v1.GetTenantRequest, v1.GetTenantResponse]
}

// CreateTenant calls tenants.tenantspb.v1.TenantsService.CreateTenant.
func (c *tenantsServiceClient) CreateTenant(ctx context.Context, req *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error) {
	return c.createTenant.CallUnary(ctx, req)
}

// GetTenant calls tenants.tenantspb.v1.TenantsService.GetTenant.
func (c *tenantsServiceClient) GetTenant(ctx context.Context, req *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error) {
	return c.getTenant.CallUnary(ctx, req)
}

// TenantsServiceHandler is an implementation of the tenants.tenantspb.v1.TenantsService service.
type TenantsServiceHandler interface {
	CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error)
	GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error)
}

// NewTenantsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantsServiceHandler(svc TenantsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantsServiceMethods := v1.File_tenants_tenantspb_v1_api_proto.Services().ByName("TenantsService").Methods()
	tenantsServiceCreateTenantHandler := connect.NewUnaryHandler(
		TenantsServiceCreateTenantProcedure,
		svc.CreateTenant,
		connect.WithSchema(tenantsServiceMethods.ByName("CreateTenant")),
		connect.WithHandlerOptions(opts...),
	)
	tenantsServiceGetTenantHandler := connect.NewUnaryHandler(
		TenantsServiceGetTenantProcedure,
		svc.GetTenant,
		connect.WithSchema(tenantsServiceMethods.ByName("GetTenant")),
		connect.WithHandlerOptions(opts...),
	)
	return "/tenants.tenantspb.v1.TenantsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantsServiceCreateTenantProcedure:
			tenantsServiceCreateTenantHandler.ServeHTTP(w, r)
		case TenantsServiceGetTenantProcedure:
			tenantsServiceGetTenantHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantsServiceHandler struct{}

func (UnimplementedTenantsServiceHandler) CreateTenant(context.Context, *connect.Request[v1.CreateTenantRequest]) (*connect.Response[v1.CreateTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tenants.tenantspb.v1.TenantsService.CreateTenant is not implemented"))
}

func (UnimplementedTenantsServiceHandler) GetTenant(context.Context, *connect.Request[v1.GetTenantRequest]) (*connect.Response[v1.GetTenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("tenants.tenantspb.v1.TenantsService.GetTenant is not implemented"))
}
